plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.sonarqube" version "4.3.1.3277"
}

group = 'com.c4cometrue'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-security'

    //spring bean validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    /*JWT 관련 라이브러리*/
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    // JUnit
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
}

checkstyle {
    configFile = file("${rootDir}/naver-checkstyle.xml")
    configProperties = ["suppressionFile": "${rootDir}/naver-checkstyle-suppressions.xml"]
    toolVersion = "9.2"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, excludes: [
                '**/*Application*',
                '**/exception/**',
                '**/config/**',
                '**/dto/**',
                '**/jwt/**'
        ])
    }))

    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(true)
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVERERDRATIO'
                minimum = 0.80
            }
        }

        rule {
            excludes = [
                    '**/*Application*',
                    '**/exception/**',
                    '**/config/**',
                    '**/dto/**',
                    '**/jwt/**'
            ]
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "C4-ComeTrue_c4-cometrue-assignment"
        property "sonar.organization", "c4-cometrue"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml"
    }
}